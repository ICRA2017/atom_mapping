atom_example:
  # Topic with transformed point clouds.
  data_topic: /blam/blam_slam/base_frame_point_cloud
  #data_topic: /velodyne_points
  #data_topic: /atom_map_example/filtered

  # Optionally buffer up both point clouds and poses and use all the data
  # even if it is not in real-time. If this flag is not set, then the default
  # behavior is to read transforms from the tf tree provided by ROS whenever
  # a new point cloud message is received. This means that some frames may be skipped
  # if processing is not otherwise real-time.
  buffer_all: false

  # Name of fixed frame.
  fixed_frame: world

  # Topic for pose estimate for robot in world frame.
  pose_topic: /blam/blam_slam/localization_integrated_estimate

  # Voxel grid filter leaf size. This should probably be roughly on the order of
  # an atomic radius in order to avoid drastic oversampling.
  filter_leaf_size: 0.4

  # Topic on which filtered point clouds should be published.
  filtered_cloud_topic: filtered

  # Optionally save to file on close.
  save_on_close: true
  file_to_save: /Users/davidfridovichkeil/Documents/Developer/atom_mapping/internal/src/atom_map_example/saved_maps/nsh_250cm.csv

  # Publish path from start to finish points.
  path_topic: path

  # Optionally, if this is positive the path planner will try to keep paths near
  # this signed distance value.
  path_sdf_manifold: 1.0
